@startuml

title __SIMULATIONOBJECTS's Class Diagram__\n

  package  {
    package Simulation {
      package Simulation.SimulationObjects {
        class Board {
            - width : int
            - height : int
            - hunters : List<Hunter>
            - preys : List<Prey>
            - obstacles : List<BoardObject>
            + Board()
            + spawnHunter()
            + spawnPrey()
            + spawnObstacle()
            + spawn()
            - spawnHunter()
            - spawnPrey()
            - spawnObstacle()
            + removeFromBoard()
            ~ removeHunter()
            ~ removePrey()
            ~ removeObstacle()
            ~ removeBoardObject()
            + getHunters()
            + getPreys()
            + getObstacles()
            + getWidth()
            + getHeight()
            + getBoardObjects()
            + getLivingCreatues()
            + getObjectAtLocation()
            - generateRandomLoc()
            + isEmpty()
            + isOnBoard()
        }
      }
    }
  }
  

  package  {
    package Simulation {
      package Simulation.SimulationObjects {
        interface BoardObject {
            {abstract} + getLocation()
        }
      }
    }
  }
  

  package  {
    package Simulation {
      package Simulation.SimulationObjects {
        class Location {
            - x : int
            - y : int
            + Location()
            + getX()
            + getY()
            + moveEast()
            + moveWest()
            + moveNorth()
            + moveSouth()
            + getDistance()
            + move()
            + wayTo()
            + equals()
            + clone()
        }
      }
    }
  }
  

  package  {
    package Simulation {
      package Simulation.SimulationObjects {
        class DeadCorpse {
            ~ share : int
            - timesEaten : int
            - pieces : int
            + DeadCorpse()
            + eat()
            + rot()
            + getLocation()
        }
      }
    }
  }
  

  package  {
    package Simulation {
      package Simulation.SimulationObjects {
        class Hunter {
            ~ Hunter()
            + react()
            + attack()
            + die()
            + getBoard()
            + receiveGroupInvitation()
            + see()
            - seeNorth()
            - seeSouth()
            - scanViewWidth()
            - seeWest()
            - seeEast()
            - scanViewHeight()
            - scan()
        }
      }
    }
  }
  

  package  {
    package Simulation {
      package Simulation.SimulationObjects {
        abstract class LivingCreature {
            ~ maxMovementSpeed : int
            ~ strength : int
            ~ sightDistance : int
            ~ energy : int
            ~ direction : String
            ~ stepsTaken : double
            {abstract} + react()
            {abstract} + see()
            {abstract} + attack()
            + die()
            + eat()
            + getLocation()
            + move()
            + moveNorthEast()
            + moveNorthWest()
            + moveSouthEast()
            + moveSouthWest()
            + moveSouth()
            + moveNorth()
            + moveEast()
            + moveWest()
            + getStrength()
            + getMaxMovementSpeed()
            + getPossibleSteps()
            + getEnergy()
            + getRandom()
            + setDirection()
            + getDirection()
            + getDirectionNum()
        }
      }
    }
  }
  

  package  {
    package Simulation {
      package Simulation.SimulationObjects {
        class Obstacle {
            ~ Obstacle()
            + getLocation()
        }
      }
    }
  }
  

  package  {
    package Simulation {
      package Simulation.SimulationObjects {
        class Prey {
            ~ Prey()
            + react()
            + see()
            - seeNorth()
            - seeSouth()
            - seeWest()
            - seeEast()
            - northAndSouthScanOfForwardAndBackwards()
            - northAndSouthScanOfLeftAndRight()
            - westAndEastScanOfForwardAndBackwards()
            - westAndEastScanOfLeftAndRight()
            + attack()
        }
      }
    }
  }
  

  BoardObject +-down- Location
  DeadCorpse -up-|> BoardObject
  DeadCorpse o-- Board : board
  DeadCorpse o-- Location : loc
  Hunter -up-|> LivingCreature
  LivingCreature -up-|> BoardObject
  LivingCreature o-- AI : brain
  LivingCreature o-- Board : myBoard
  LivingCreature o-- Location : loc
  Obstacle -up-|> BoardObject
  Obstacle o-- Location : loc
  Prey -up-|> LivingCreature


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
